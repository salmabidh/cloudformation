i{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": " creating ec2instance with vpc components",
    "Parameters": {
        "Keys": {
            "Description": "select keypair",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "Image": {
            "Description": "select  all linux flavours",
            "Type": "String",
            "Default": "ami-0cd4900b43e25799c",
            "AllowedValues": [
                "ami-0cd4900b43e25799c",
                "ami-0a9d27a9f4f5c0efc",
                "ami-0d758c1134823146a",
                "ami-006650c37d04e2c1e"
            ]
        },
        "InstanceType": {
            "Description": "select instance type",
            "Type": "String",
            "Default": "t2.micro",
            "AllowedValues": [
                "t2.micro",
                "t2.medium",
                "t2.large"
            ]
        },
        "CidrBlock": {
            "Description": "select cidr block",
            "Type": "String",
            "Default": "10.0.0.0/16"
        },
        "subnet1cidr": {
            "Description": "select subnets",
            "Type": "String",
            "Default": "10.0.1.0/24"
        },
        "subnet2cidr": {
            "Description": "select subnets",
            "Type": "String",
            "Default": "10.0.2.0/24"
        },
        "AvailabilityZone1": {
            "Description": "select avaliablity zone for subnet1",
            "Type": "String",
            "Default": "ap-southeast-1a",
            "AllowedValues": [
                "ap-southeast-1a",
                "ap-southeast-1b",
                "ap-southeast-1c"
            ]
        },
        "AvailabilityZone2": {
            "Description": "select avaliablity zone for subnet2",
            "Type": "String",
            "Default": "ap-southeast-1a",
            "AllowedValues": [
                "ap-southeast-1a",
                "ap-southeast-1b",
                "ap-southeast-1c"
            ]
        },
        "Security": {
            "Description": "creating security groups",
            "Type": "List<AWS::EC2::SecurityGroup::GroupName>"
        }
    },
    "Resources": {
        "Ec2instanceone": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "KeyName": {
                    "Ref": "Keys"
                },
                "ImageId": {
                    "Ref": "Image"
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "Monitoring": "true",
                "SecurityGroupIds": [
                    {
                        "Fn::GetAtt": [
                            "VPC",
                            "DefaultSecurityGroup"
                        ]
                    }
                ],
                "SubnetId": {
                    "Ref": "subnet1"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "ec2 from cloudwatch"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "yum install httpd -y\n",
                                "systemctl start httpd\n",
                                "chkconfig httpd on\n",
                                "echo 'Welcome to CF' > /var/www/html/index.html\n"
                            ]
                        ]
                    }
                }
            }
        },
        "Ec2instancetwo": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "KeyName": {
                    "Ref": "Keys"
                },
                "ImageId": {
                    "Ref": "Image"
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "Monitoring": "true",
                "SecurityGroupIds": [
                    {
                        "Fn::GetAtt": [
                            "VPC",
                            "DefaultSecurityGroup"
                        ]
                    }
                ],
                "SubnetId": {
                    "Ref": "subnet2"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "newone"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "yum install httpd -y\n",
                                "systemctl start httpd\n",
                                "chkconfig httpd on\n",
                                "echo 'Welcome to CF' > /var/www/html/index.html\n"
                            ]
                        ]
                    }
                }
            }
        },
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": {
                    "Ref": "CidrBlock"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "vpc for cloudwatch"
                    }
                ]
            }
        },
        "subnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Ref": "AvailabilityZone1"
                },
                "MapPublicIpOnLaunch":"true",
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Ref": "subnet1cidr"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "subnet1cidr for cloudwatch"
                    }
                ]
            }
        },
        "subnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Ref": "AvailabilityZone2"
                },
                "MapPublicIpOnLaunch":"true",
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Ref": "subnet2cidr"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "subnet2cidr for cloudwatch"
                    }
                ]
            }
        },
        "igwName": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "internet gateway for cloudwatch"
                    }
                ]
            }
        },
        "AttachGateway": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "InternetGatewayId": {
                    "Ref": "igwName"
                }
            }
        },
        "routeTableName": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "routetables for cloudwatch"
                    }
                ]
            }
        },
        "routeName": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "routeTableName"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "igwName"
                }
            }
        },
        "routeTableAssocName1": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "subnet1"
                },
                "RouteTableId": {
                    "Ref": "routeTableName"
                }
            }
        },
        "routeTableAssocName2": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "subnet2"
                },
                "RouteTableId": {
                    "Ref": "routeTableName"
                }
            }
        },
        "loadbalancer": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "AvailabilityZones": [
                    "ap-southeast-1a",
                    "ap-southeast-1b"
                ],
                "Listeners": [
                    {
                        "InstancePort": "80",
                        "LoadBalancerPort": "80",
                        "Protocol": "HTTP"
                    }
                ],
                "HealthCheck": {
                    "Target": "HTTP:80/",
                    "HealthyThreshold": "2",
                    "UnhealthyThreshold": "3",
                    "Interval": "10",
                    "Timeout": "5"
                },
                "Tags": [
                    {
                        "Key": "name",
                        "Value": "load balancer"
                    }
                ]
            }
        }
    }
}
